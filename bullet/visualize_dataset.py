"""Visualizes images and labels for a particular dataset."""
import imageio
from matplotlib.pyplot import cm
import numpy as np
import os
from tqdm import tqdm
from typing import *

from bullet.camera import BulletCamera
from bullet.dash_dataset import DashDataset
import bullet.dash_object
from bullet.dash_object import DashObject, DashTable
from bullet.renderer import BulletRenderer
import bullet.util


def main(dataset_name: str):
    dataset_dir = f"/home/michelle/datasets/{dataset_name}"
    pred_path = f"/home/michelle/outputs/{dataset_name}/test.json"
    output_dir = f"/home/michelle/analysis/{dataset_name}"
    os.makedirs(output_dir, exist_ok=True)

    # Create an instance of a DashDataset.
    dataset = DashDataset(dataset_dir=dataset_dir)

    # Load the predictions.
    pred_dicts = bullet.util.load_json(path=pred_path)
    img_id2pred_objects = {}
    for pred_dict in pred_dicts:
        img_id = pred_dict["img_id"]
        oid = pred_dict["oid"]
        y = pred_dict["pred"]

        y_dict = bullet.dash_object.y_vec_to_dict(y=y)
        gt_o = dataset.load_object(img_id=img_id, oid=oid)
        o = bullet.dash_object.y_dict_to_object(
            y_dict=y_dict, gt_orientation=gt_o.orientation
        )
        if img_id not in img_id2pred_objects:
            img_id2pred_objects[img_id] = []
        img_id2pred_objects[img_id].append(o)
    print(img_id2pred_objects)

    # For each example, load the rgb image and mask.
    img_ids = dataset.load_example_ids()
    for img_id in tqdm(img_ids):
        gt_objects, camera, rgb, mask = dataset.load_example(eid=img_id)

        # Convert the mask to an image.
        mask_img = convert_mask_to_img(mask=mask)

        # Rerender the scene from the GT labels.
        rerendered_gt = rerender(objects=gt_objects, camera=camera)

        # Rerender the scene from the model predictions.
        pred_objects = img_id2pred_objects[img_id]
        rerendered_pred = rerender(objects=pred_objects, camera=camera)

        # Combine the panels and save.
        visual = np.hstack([rgb, mask_img, rerendered_gt])
        path = os.path.join(output_dir, f"{img_id:05}.png")
        imageio.imwrite(path, visual)


def rerender(objects: List[DashObject], camera: BulletCamera) -> np.ndarray:
    """Rerenders a scene given a JSON dictionary of labels generated by a 
    DashDataset.

    Args:
        objects: A list of DashObjects in the scene.
        camera: The camera of the scene.

    Returns:
        rerendered: The rerendered image.
    """
    p = bullet.util.create_bullet_client(mode="direct")
    renderer = BulletRenderer(p=p)
    objects_to_render = objects + [DashTable()]
    [renderer.render_object(o=o) for o in objects_to_render]
    rerendered, _ = camera.get_rgb_and_mask(p=p)
    return rerendered


def convert_mask_to_img(mask: np.ndarray):
    H, W = mask.shape
    mask_img = np.zeros((H, W, 3)).astype(np.uint8)
    oids = np.unique(mask)
    color = iter(cm.rainbow(np.linspace(0, 1, len(oids))))
    for oid in oids:
        mask_img[mask == oid] = next(color)[:3] * 255
    return mask_img


if __name__ == "__main__":
    dataset_name = "ego_001"
    main(dataset_name=dataset_name)
